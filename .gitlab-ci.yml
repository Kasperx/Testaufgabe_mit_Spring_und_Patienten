
image: maven:3.8.3-openjdk-17

variables:
  MAVEN_OPTS: "-Djava.awt.headless=true -Dmaven.repo.local=./.m2/repository"
  MAVEN_CLI_OPTS: "--batch-mode --errors --fail-at-end --show-version"
  DOCKER: "docker:26-cli"
  DEBIAN: "debian:oldstable-20240311-slim"
  docker-tag: "$CI_COMMIT_BRANCH_test.0.1"

cache:
  paths:
    #- .m2/repository
    #- ./.m2/repository
    - $CI_PROJECT_DIR/.m2/
  # keep cache across branch
  #key: maven-cache
  key: "$CI_BUILD_REF_NAME"

stages:
  - build
  - install
  - test
  - package
  - deploy
  - start

compile:
  stage: build
  script:
    - echo "Compile java code"
    - "mvn clean compile -Dmaven.test.skip $MAVEN_CLI_OPTS"

install:
  stage: install
  dependencies:
    - compile
  script:
    - echo "Compile java code"
    - "mvn install -Dmaven.test.skip $MAVEN_CLI_OPTS"

package:
  stage: package
  only:
    refs:
      - master
      - main
      - deploy-remote-ssh
      - db-data-call
  dependencies:
    #- test-with-junit
    - install
  artifacts:
    paths:
      - "target/*.jar"
  script:
    - echo "Deploy to target folder"
    - "mvn package $MAVEN_CLI_OPTS"

.package_to_docker_image:
  stage: package
  image: "$DOCKER"
  only:
    refs:
      - master
      - main
      - deploy-remote-ssh
      - db-data-call
  dependencies:
    #- test-with-junit
    - package
  artifacts:
    paths:
      - "target/*.jar"
  script:
    - echo "Create docker image"
    #- docker build --platform linux/amd64 -t my-spring-boot-test .
    #- docker build -t $ci_gitlab_registry/my-spring-boot-test:1 .
    - docker build -t my-spring-boot-test .

.test-with-junit:
  stage: test
  script:
    - echo "Run tests (after compile)"
    - "mvn test $MAVEN_CLI_OPTS"
  dependencies:
    - integration-test
  artifacts:
    paths:
      - target/

deploy-remote-ssh:
  stage: deploy
  dependencies:
    - package
  only:
    refs:
      - master
      - main
      - deploy-remote-ssh
  #image: debian:oldstable
  image: "$DEBIAN"
  when: manual
  #environment:
#    name: Staging
#    url: "$URL"
  before_script:
    - echo "Preparing deploy to 'web@${URL}/web/'"
    - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'
    #- 'which sshpass || ( apt-get update -y && apt-get install sshpass -y )'
    - mkdir -p ~/.ssh
    - eval $(ssh-agent -s)
    #- ssh-add <(echo "${SSH_PRIVATE_KEY}" | base64 -d | tr -d "\r")
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add
    - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
  script:
    - echo "Deploy to 'web@${URL}/web/'"
    #- "mkdir -p ~/.ssh && echo $SSH_PRIVATE_KEY | base64 -d > ${SSH_KEY_FILE} && chmod 0600 ${SSH_KEY_FILE}"
    - ssh -o StrictHostKeyChecking=no web@${URL}" 'rm -rf ~/web/*'
    #- ssh test@$url -c \"rm web/*\"
    - scp target/Learning_java_springboot_minimal_with_database-0.0.1-SNAPSHOT-spring-boot.jar web@${URL}:/web/

create-image-and-upload-to-gitlab.com:
  stage: deploy
  dependencies:
    - package
  only:
    refs:
      - master
      - main
      - deploy-remote-ssh
      - db-data-call
  #image: debian:oldstable
  #image: docker:20-git
  image: "$DOCKER"
  #image: "$DEBIAN"
  #services:
#    - name: "$DOCKER"
#      alias: docker
#      entrypoint: ["dockerd-entrypoint.sh", "--tls=false"]
  #when: manual
  services:
    - name: docker:23.0.1-dind
      alias: docker
  before_script:
    - echo "--- Test ---"
    - echo "gitlab repo= $CI_GITLAB_REGISTRY"
    - echo "gitlab username= $CI_GITLAB_REGISTRY_USER"
    - echo "gitlab token= $CI_GITLAB_REGISTRY_TOKEN"
    - echo "gitlab pw= $CI_GITLAB_REGISTRY_PW"
    - echo "Preparing deploy to $CI_GITLAB_REGISTRY"
    - echo "Docker login to $CI_GITLAB_REGISTRY"
    - docker login "$CI_GITLAB_REGISTRY" -u "$CI_GITLAB_REGISTRY_USER" -p "$CI_GITLAB_REGISTRY_TOKEN"
    #- docker login $CI_GITLAB_REGISTRY -u $CI_GITLAB_REGISTRY_USER -p $CI_GITLAB_REGISTRY_PW
    #- echo "Docker build '$CI_GITLAB_REGISTRY/$CI_GITLAB_REGISTRY_USER/java-with-spring-boot-server-with_db:$CI_COMMIT_SHORT_SHA'"
    #- docker build -t "$CI_GITLAB_REGISTRY"/"$CI_GITLAB_REGISTRY_USER"/java-with-spring-boot-server-with_db:"$CI_COMMIT_BRANCH"_"$CI_COMMIT_SHORT_SHA" .
    - echo "Docker build '$CI_GITLAB_REGISTRY/$CI_GITLAB_REGISTRY_USER/java-with-spring-boot-server-with_db:$docker-tag"
    - docker build -t "$CI_GITLAB_REGISTRY"/"$CI_GITLAB_REGISTRY_USER"/java-with-spring-boot-server-with_db:$docker-tag .
  script:
    - echo "Preparing deploy to $CI_GITLAB_REGISTRY/my-spring-boot-test:$docker-tag"
    #- docker push "$CI_GITLAB_REGISTRY"/"$CI_GITLAB_REGISTRY_USER"/java-with-spring-boot-server-with_db:"$CI_COMMIT_BRANCH"_"$CI_COMMIT_SHORT_SHA"
    - docker push "$CI_GITLAB_REGISTRY"/"$CI_GITLAB_REGISTRY_USER"/java-with-spring-boot-server-with_db:$docker-tag

.create-image-and-upload-to-docker.com:
  stage: deploy
  dependencies:
    - package
  only:
    refs:
      - master
      - main
      - deploy-remote-ssh
      - db-data-call
  #image: debian:oldstable
  #image: docker:20-git
  image: "$DOCKER"
  #image: "$DEBIAN"
  #services:
#    - name: "$DOCKER"
#      alias: docker
#      entrypoint: ["dockerd-entrypoint.sh", "--tls=false"]
  when: manual
  #environment:
#    name: Staging
#    url: "$URL"
  before_script:
    - echo "--- Test ---"
    - echo "docker repo= $CI_DOCKER_REGISTRY"
    - echo "docker username= $CI_DOCKER_REGISTRY_USER"
    - echo "docker token= $CI_DOCKER_REGISTRY_TOKEN"
    - echo "docker pw= $CI_DOCKER_REGISTRY_PW"
    - echo "Preparing deploy to DOCKER.com"
    - echo "Docker login to $CI_DOCKER_REGISTRY"
    - docker login "$CI_DOCKER_REGISTRY" -u "$CI_DOCKER_REGISTRY_USER" -p "$CI_DOCKER_REGISTRY_TOKEN"
    - echo "Docker build $CI_DOCKER_REGISTRY/$CI_DOCKER_REGISTRY_USER/java-with-spring-boot-server-with_db:$CI_COMMIT_SHORT_SHA'"
    #- docker build -t "$CI_DOCKER_REGISTRY"/"$CI_DOCKER_REGISTRY_USER"/java-with-spring-boot-server-with_db:"$CI_COMMIT_BRANCH" .
    - docker build -t java-with-spring-boot-server-with_db:$CI_COMMIT_SHORT_SHA .
  script:
    - echo "Preparing deploy to $CI_DOCKER_REGISTRY/my-spring-boot-test:$CI_COMMIT_SHORT_SHA"
    #- docker push "$CI_DOCKER_REGISTRY"/"$CI_DOCKER_REGISTRY_USER"/java-with-spring-boot-server-with_db:$CI_COMMIT_SHORT_SHA
    - docker push "$CI_DOCKER_REGISTRY"/"$CI_DOCKER_REGISTRY_USER"/java-with-spring-boot-server-with_db:test.0.1

.integration-test:
  stage: test
  only:
    refs:
      - master
      - main
      - deploy-remote-ssh
      - db-data-call
  dependencies:
    - install
  script:
    - "mvn verify $MAVEN_CLI_OPTS"
  artifacts:
    paths:
      - target/

upload-to-cloud-and-start:
  stage: publish
  image: $DOCKER
  dependencies:
    - create-image-and-upload-to-gitlab.com
  only:
    refs:
      - master
      - main
      - deploy-remote-ssh
      - db-data-call
  variables:
    DOCKER_HOST: ssh://web@$URL
  #when: manual
  before_script:
    - apk update && apk add openssh-client bash
    - mkdir -p ~/.ssh
    # test original
    #- echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
    #- chmod 600 ~/.ssh/id_rsa
    #- eval "$(ssh-agent -s)"
    #- ssh-add ~/.ssh/id_rsa
    # /test
    # test
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - eval "$(ssh-agent -s)"
    - ssh-add ~/.ssh/id_rsa
    #- echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add
    # /test
    - ssh-keyscan -H $URL >> ~/.ssh/known_hosts
    #- docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - echo "Stopping active container on $URL"
    - docker stack remove java-with-spring-boot-server-with_db
  script:
    - echo "Upload and start image to $URL"
    #- docker stack deploy -c docker-compose.yml $CI_DOCKER_REMOTE_USER:$URL
    - docker stack deploy -c docker-compose.yml my-stack