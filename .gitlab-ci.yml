
image: maven:3.8.3-openjdk-17

variables:
  MAVEN_OPTS: "-Djava.awt.headless=true -Dmaven.repo.local=./.m2/repository"
  MAVEN_CLI_OPTS: "--batch-mode --errors --fail-at-end --show-version"
  DOCKER: "docker:24.0.6"
  DEBIAN: "debian:oldstable-20240311-slim"

cache:
  paths:
    #- .m2/repository
    #- ./.m2/repository
    - $CI_PROJECT_DIR/.m2/
  # keep cache across branch
  #key: maven-cache
  key: "$CI_BUILD_REF_NAME"

stages:
  - build
  - install
  - test
  - package
  - deploy

compile:
  stage: build
  script:
    - echo "Compile java code"
    - "mvn clean compile -Dmaven.test.skip $MAVEN_CLI_OPTS"

install:
  stage: install
  dependencies:
    - compile
  script:
    - echo "Compile java code"
    - "mvn install -Dmaven.test.skip $MAVEN_CLI_OPTS"

.test-with-junit:
  stage: test
  script:
    - echo "Run tests (after compile)"
    - "mvn compile test $MAVEN_CLI_OPTS"
  dependencies:
    - integration-test
  artifacts:
    paths:
      - target/

deploy-remote-ssh:
  stage: deploy
  dependencies:
    - package
  only:
    refs:
      - master
      - main
      - deploy-remote-ssh
  #image: debian:oldstable
  image: "$DEBIAN"
  when: manual
  #environment:
#    name: Staging
#    url: "$URL"
  before_script:
    - echo "Preparing deploy to 'web@${URL}/web/'"
    - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'
    #- 'which sshpass || ( apt-get update -y && apt-get install sshpass -y )'
    - mkdir -p ~/.ssh
    - eval $(ssh-agent -s)
    #- ssh-add <(echo "${SSH_PRIVATE_KEY}" | base64 -d | tr -d "\r")
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add
    - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
  script:
    - echo "Deploy to 'web@${URL}/web/'"
    #- "mkdir -p ~/.ssh && echo $SSH_PRIVATE_KEY | base64 -d > ${SSH_KEY_FILE} && chmod 0600 ${SSH_KEY_FILE}"
    - ssh -o StrictHostKeyChecking=no web@${URL}" 'rm -rf ~/web/*'
    #- ssh test@$url -c \"rm web/*\"
    - scp target/Learning_java_springboot_minimal_with_database-0.0.1-SNAPSHOT-spring-boot.jar web@${URL}:/web/

deploy-remote-docker-der_staudamm:
  stage: deploy
  dependencies:
    - package
  only:
    refs:
      - master
      - main
      - deploy-remote-ssh
      - db-data-call
  #image: debian:oldstable
  #image: docker:20-git
  image: "$DOCKER"
  when: manual
  #environment:
#    name: Staging
#    url: "$URL"
  before_script:
    - echo "Preparing deploy to docker.com @ $CI_REGISTRY"
    #- echo -n $CI_REGISTRY_PW | docker login -u $CI_REGISTRY_USER -- password-stdin $CI_REGISTRY
    #- docker login $CI_REGISTRY -u $CI_REGISTRY_USER --password-stdin <<<$CI_REGISTRY_TOKEN # error in pipeline
    - docker login -u $CI_REGISTRY_USER --password-stdin <<<$CI_REGISTRY_TOKEN
  script:
    - echo "Preparing deploy to docker.com -> $CI_REGISTRY_USER/$CI_REGISTRY:1"
    - >
      docker build
      --tag $CI_REGISTRY:1
      .
    #- docker push $CI_REGISTRY_NAME:$CI_COMMIT_REF_NAME
    - docker push $CI_REGISTRY:1

deploy-remote-gitlab:
  stage: deploy
  dependencies:
    - package
  only:
    refs:
      - master
      - main
      - deploy-remote-ssh
      - db-data-call
  #image: debian:oldstable
  #image: docker:20-git
  #image: "$DOCKER"
  image: "$DEBIAN"
  when: manual
  #environment:
#    name: Staging
#    url: "$URL"
  before_script:
    - echo "Preparing deploy to gitlab.com"
    - 'which docker || ( apt-get update -y && apt-get install docker docker.io -y )'
    #- echo -n $CI_REGISTRY_PW | docker login -u $CI_REGISTRY_USER -- password-stdin $CI_REGISTRY
    #- docker login $CI_REGISTRY -u $CI_REGISTRY_USER --password-stdin <<<$CI_REGISTRY_TOKEN # error in pipeline
    #- echo "$gitlab_registry_token" | docker login -u "$ci_gitlab_registry_user" --password-stdin -- "$ci_gitlab_registry"
    #- echo "$gitlab_registry_token" | docker login --password-stdin -- "$ci_gitlab_registry"
    #- docker login $ci_gitlab_registry -u $ci_gitlab_registry_user --password-stdin <<<$gitlab_registry_token
    #- docker login "$ci_gitlab_registry" -u "$ci_gitlab_registry_user" --password-stdin <<<"$gitlab_registry_pw"
    - docker login "$ci_gitlab_registry" -u "$ci_gitlab_registry_user" -p <<<"$gitlab_registry_token"
    #- docker login $ci_gitlab_registry -u $ci_gitlab_registry_user -p $gitlab_registry_pw
    - docker build -t my-spring-boot-test .
  script:
    - echo "Preparing deploy to $ci_gitlab_registry -> my-spring-boot-test:1"
    #- docker build -t $ci_gitlab_registry/my-spring-boot-test:1 .
    #- docker push $CI_REGISTRY_NAME:$CI_COMMIT_REF_NAME
    - docker push $ci_gitlab_registry/my-spring-boot-test:1

.integration-test:
  stage: test
  only:
    refs:
      - master
      - main
      - deploy-remote-ssh
      - db-data-call
  dependencies:
    - install
  script:
    - "mvn verify $MAVEN_CLI_OPTS"
  artifacts:
    paths:
      - target/

package:
  stage: package
  only:
    refs:
      - master
      - main
      - deploy-remote-ssh
      - db-data-call
  dependencies:
    #- test-with-junit
    - install
  artifacts:
    paths:
      - "target/*.jar"
  script:
    - echo "Deploy to target folder"
    - "mvn package $MAVEN_CLI_OPTS"

.package_to_docker_image:
  stage: package
  image: "$DOCKER"
  only:
    refs:
      - master
      - main
      - deploy-remote-ssh
      - db-data-call
  dependencies:
    #- test-with-junit
    - package
  artifacts:
    paths:
      - "target/*.jar"
  script:
    - echo "Create docker image"
    #- docker build --platform linux/amd64 -t my-spring-boot-test .
    #- docker build -t $ci_gitlab_registry/my-spring-boot-test:1 .
    - docker build -t my-spring-boot-test .
